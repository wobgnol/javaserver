package de.moaiosbeer.rest_api;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.annotation.security.RolesAllowed;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;
import org.hibernate.criterion.Restrictions;

import de.moaiosbeer.dao.Game_V1_01_DaO;
import de.moaiosbeer.dao.Playsheet_V1_01_DaO;
import de.moaiosbeer.dao.User_V1_01_DaO;
import de.moaiosbeer.db.models.Game_V1_01;
import de.moaiosbeer.db.models.Playsheet_V1_01;
import de.moaiosbeer.db.models.User_V1_01;
import de.moaiosbeer.hibernate.Hib_DB_Conn_V1_01;


/**
 * Dieser API Pfad dient dem Login_Servlet als Nutzer Validierung für den Login
 * @author Stephan
 */
@Path("v1.01/games")
public class API_Games_V1_01 {
	
	@POST
	@RolesAllowed({"admin","player","manager-gui"})
	@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
	@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
	@Path("/{auth}/create={gamename}/as={roleID}")
	public Response create_game(@PathParam("auth") String token,@PathParam("gamename") String gamename,@PathParam("roleID") int roleId)
	{
		Game_V1_01_DaO gd = new Game_V1_01_DaO();
		Game_V1_01 g = new Game_V1_01();
		User_V1_01 u = new User_V1_01();
		g.setGamename(gamename);
		User_V1_01_DaO ud = new User_V1_01_DaO();
		try {
			u = ud.getUser(ud.getUserIdByAuthToken(token));
		} catch (Exception e) {
			return Response.status(500).build();
		}
		
		try {
			g.addPlayer(u,roleId);
			gd.newGame(g);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			return Response.status(1201).entity("\"Error\":\"" + e.getMessage() + "\"").build();
		}
		
		return Response.status(1001).build();
	}
	
	@POST
	@RolesAllowed({"admin","player","manager-gui"})
	@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
	@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
	@Path("/{auth}/join={gameid}/as={roleID}")
	public Response join_game(@PathParam("auth") String token,@PathParam("gameid") long gameid,@PathParam("roleID") int roleId)
	{
		roleId%=4;
		Game_V1_01_DaO gd = new Game_V1_01_DaO();
		Game_V1_01 g = new Game_V1_01();
		User_V1_01 u = new User_V1_01();
		User_V1_01_DaO ud = new User_V1_01_DaO();
		try {
			g = gd.GetGameById(gameid);
			u = ud.getUser(ud.getUserIdByAuthToken(token));
			System.out.println("Userid: " + u.getId());
			System.out.println("Role  : " + roleId);
		} catch (Exception e) {
			return Response.status(500).build();
		}
		
		try {
			g.addPlayer(u,roleId);
			gd.updateGame(g, u.getId());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return Response.status(1202).entity("{\"Error\":\"" + e.getMessage() + "\"}").build();
		}
		return Response.status(1002).build();
	}
	
	@GET
	@RolesAllowed({"admin","player","manager-gui"})
	@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
	@Path("/{auth}/myplaysheet={gameid}")
	public Response get_playsheet_info(@PathParam("auth") String token,@PathParam("gameid") long gameid)
	{
		User_V1_01_DaO ud = new User_V1_01_DaO();
		long id = ud.getUserIdByAuthToken(token);
		Game_V1_01_DaO g = new Game_V1_01_DaO();
		Game_V1_01 game = g.GetGameById(gameid);
		long pid = 1;
		for(Playsheet_V1_01 pls : game.getPlaysheets())
		{
			if(pls.getOwner_id() == id)
			{
				pid = pls.getId();
				break;
			}
		}
		Playsheet_V1_01_DaO p = new Playsheet_V1_01_DaO();
		List<Playsheet_V1_01> ps = new ArrayList<Playsheet_V1_01>();
		try {
			ps = p.get_whole_playsheet(pid);
		} catch (Exception e) {
			return Response.status(500).build();
		}
		String json;
		if(ps.size()>1)
		{
			int average = 0;
			for(int i=0;i<ps.size()-1;i++)
			{
				average = ps.get(i).getNeworder();
			}
			average/=(ps.size()-1);
			try {
				json = "{\"role\":\"" + ps.get(0).getGamerole() + "\",\"average_order\":" + average + ",\"costs\":" + ps.get(ps.size()-1).getTotalcosts()
						+ ",\"available\":" + ps.get(ps.size()-1).getInventory()
						+ ",\"next_inc\":" + p.get_incoming(ps.get(0).getId(), ps.size()-1)
						+ ",\"delivered\":" + ps.get(ps.size()-1).getNeworder()
						+ ",\"playsheet\":";
			} catch (Exception e) {
				// TODO Auto-generated catch block
				json = "{\"Error\": \"An unknown Error occured!\"}";
				return Response.status(500).build();
			}
			ObjectMapper mapper = new ObjectMapper();
			try {
				json += mapper.writeValueAsString(ps);
				json+="}";
			} catch (JsonGenerationException e) {
				json = "{\"Error\": \"An unknown Error occured!\"}";
				return Response.status(501).build();
			} catch (JsonMappingException e) {
				json = "{\"Error\": \"An unknown Error occured!\"}";
				return Response.status(501).build();
			} catch (IOException e) {
				json = "{\"Error\": \"An unknown Error occured!\"}";
				return Response.status(501).build();
			}
		}
		else
		{
			try {
				json = "{\"role\":\"" + ps.get(0).getGamerole() + "\",\"average_order\": 0,\"costs\": 0"
						+ ",\"available\": " + ps.get(ps.size()-1).getInventory()
						+ ",\"next_inc\": \"N/A\""
						+ ",\"delivered\": \"N/A\""
						+ ",\"playsheet\":";
			} catch (Exception e) {
				e.printStackTrace();
				json = "{\"Error\": \"An unknown Error occured!\"}";
				return Response.status(500).build();
			}
			System.out.println("Aktuelle JSON-String: " + json);
			ObjectMapper mapper = new ObjectMapper();
			try {
				json += mapper.writeValueAsString(ps);
				json+="}";
			} catch (JsonGenerationException e) {
				json = "{\"Error\": \"An unknown Error occured!\"}";
				return Response.status(501).build();
			} catch (JsonMappingException e) {
				json = "{\"Error\": \"An unknown Error occured!\"}";
				return Response.status(501).build();
			} catch (IOException e) {
				json = "{\"Error\": \"An unknown Error occured!\"}";
				return Response.status(501).build();
			}
		}
		return Response.status(200).entity(json).build();
	}
	
	//NACHFOLGEND SIND ALTE API-Calls zu finden!
	@GET
	@RolesAllowed({"admin","user","manager-gui"})
	@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
	@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
	@Path("/playsheet/{id}")
	public Response get_whole_playsheet(@PathParam("id") long userid)
	{
		User_V1_01_DaO u = new User_V1_01_DaO();
		Game_V1_01_DaO g = new Game_V1_01_DaO();
		List<Game_V1_01> liste = g.activeGames();
		for(int i=0;i<liste.size();i++)
		{
			for(User_V1_01 user : liste.get(i).getUserlist())
			{
				if(user.getId() == userid)
				{
					for(Playsheet_V1_01 ps : liste.get(i).getPlaysheets())
					{
						if(ps.getOwner_id() == userid)
						{
							Playsheet_V1_01_DaO p = new Playsheet_V1_01_DaO();
							
							try {
								return Response.status(200).entity(p.get_whole_playsheet((long)1)).build();
							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
								return Response.status(500).build();
							}
						}
					}
					//Etwas ist fehlgeschlagen, da der User im Game vorhanden ist
					return Response.status(500).build();
				}
			}
		}
		return Response.status(500).build();
	}
	
	@GET
	@RolesAllowed({"admin","user","manager-gui"}) 
	//@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
	@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
	@Path("/open")
	public Response get_open_games()
	{
		Game_V1_01_DaO gd = new Game_V1_01_DaO();
		return Response.status(200).entity(gd.openGames()).build();
	}
	
	@GET
	@RolesAllowed({"admin","user","manager-gui"}) 
	//@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
	@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
	@Path("/active")
	public Response get_active_games()
	{
		Game_V1_01_DaO gd = new Game_V1_01_DaO();
		return Response.status(200).entity(gd.activeGames()).build();
	}
	
	@GET
	@RolesAllowed({"admin","user","manager-gui"}) 
	@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
	@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
	@Path("/active/{id}")
	public Response get_active_game_info(@PathParam("id") long id)
	{
		Game_V1_01 deleteThis = new Game_V1_01();
		List<Game_V1_01> temp = new ArrayList<Game_V1_01>();
		
		Game_V1_01_DaO gd = new Game_V1_01_DaO();
		temp = gd.activeGames();
		for(Game_V1_01 game : temp)
		{
			if(game.getId() == id)
			{
				return Response.status(200).entity(game).build();
			}
		}
		return Response.status(404).entity("Error: Game not available").build();
	}
		
	@GET
	@RolesAllowed({"admin","user","manager-gui"})
	@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
	@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
	@Path("/open/{id}")
	public Response get_open_game_info(@PathParam("id") long id)
	{
		List<Game_V1_01> temp = new ArrayList<Game_V1_01>();
		
		Game_V1_01_DaO gd = new Game_V1_01_DaO();
		temp = gd.openGames();
		for(Game_V1_01 game : temp)
		{
			if(game.getId() == id)
			{
				return Response.status(200).entity(game).build();
			}
		}
		return Response.status(404).entity("Error: Game not available").build();
	}

	// Hole Spiele mit einer ID
	@GET
	@RolesAllowed({"admin","user","manager-gui"})
	@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
	@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
	@Path("/{id}")
	public List<Game_V1_01> get_game(@PathParam("id") long id){
		Hib_DB_Conn_V1_01 Con = new Hib_DB_Conn_V1_01();
		try{
			// Session und Transaktion starten
			Con.Transaction_Start();
			// Timeout der Transaktion setzen
			Con.getTransaction().setTimeout(10);
			  		
			//DB Abfrage mit Hibernate starten alle Tabellen einträge von User
			List<Game_V1_01> list = Con.getSession().createCriteria(Game_V1_01.class,"u").add(Restrictions.eq( "id",(long)id ) ).list();
			  		
			//Transaktion abschließen
			Con.getTransaction().commit();
			System.out.println(new Date()+" || Hibernate: Transaction comited");
			//req.getSession().invalidate();
			  		
			return list;
			  		
			// return user_chain ;
		}catch(RuntimeException e){
			try{
				Con.getTransaction().rollback();
				System.out.println("Rolback");
			}catch(RuntimeException rbe){
				//TODO Log für Transaktions rollback anlegen : log.error("Couldnt roll back transaction", rbe);
			}
			throw e;
		}finally{
			if(Con.getSession()!=null){
				Con.getSession().close();
			  	System.out.println(new Date()+ " || Hibernate: Session Closed");
			  	//TODO Log für Hibernate Sessions anlegen
			  }
			}	
		}
	
		// Hole Spiele mit einer ID
		@GET
		@RolesAllowed({"admin","user","manager-gui"})
		@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
		@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
		@Path("/playerinfo/{gameid}")
		public List<HashMap> listRoleUser(@PathParam("gameid") long id){
			Hib_DB_Conn_V1_01 Con = new Hib_DB_Conn_V1_01();
			try{
				// Session und Transaktion starten
				Con.Transaction_Start();
				// Timeout der Transaktion setzen
				Con.getTransaction().setTimeout(10);
				  		
				Game_V1_01_DaO g = new Game_V1_01_DaO();
				  		
				// Transaktion abschließen
				Con.getTransaction().commit();
				System.out.println(new Date()+" || Hibernate: Transaction comited");
				//req.getSession().invalidate();
				  		
				return g.listRoleUser(id);
				  		
				// return user_chain ;
			}catch(RuntimeException e){
				try{
					Con.getTransaction().rollback();
					System.out.println("Rolback");
				}catch(RuntimeException rbe){
					//TODO Log für Transaktions rollback anlegen : log.error("Couldnt roll back transaction", rbe);
				}
				throw e;
			}finally{
				if(Con.getSession()!=null){
					Con.getSession().close();
					System.out.println(new Date()+ " || Hibernate: Session Closed");
					//TODO Log für Hibernate Sessions anlegen
					}
				}	
			}
}