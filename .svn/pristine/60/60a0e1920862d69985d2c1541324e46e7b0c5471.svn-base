package de.moaiosbeer.db.models;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.TableGenerator;

import org.codehaus.jackson.annotate.JsonIgnore;
import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;

@Entity
@Table (name="Playsheet_V1_01")
public class Playsheet_V1_01 {

	@Id
	@TableGenerator(name="Playsheet_V1_01_ID", table="Playsheet_V1_01_PK" , pkColumnName="Playsheet_V1_01_ID" ,pkColumnValue="Playsheet_V1_01_Value" , allocationSize=1)
	@GeneratedValue(strategy=GenerationType.TABLE , generator="Playsheet_V1_01_ID")
	@Column(name="playsheetid")
	private long id;
	
	@Column(name="owner_id")
	private long owner_id;
	
	@Column(name="gamerole")
	private String gamerole;    // Rolle im Spiel
	
	@Column(name="incoming")
	private int incoming;
	
	@Column(name="round")
	private int round;
	
	@Column(name="totalcosts")
	private double totalcosts;
	
	@Column(name="inventory")
	private int inventory;
	
	@Column(name="backorder")
	private int backorder;
	
	@Column(name="neworder")
	private int neworder;
	
	@Column(name="ourorder")
	private int ourorder;
	
	@Column(name="delivery")
	private int delivery;
	
	
	@ManyToMany(cascade = CascadeType.ALL)
	@LazyCollection(LazyCollectionOption.FALSE) 
	private List<Game_V1_01> gamelist = new ArrayList<Game_V1_01>(0);
	
	public List<Game_V1_01> getGamelist() {
		return gamelist;
	}

	public void setGamelist(List<Game_V1_01> gamelist) {
		this.gamelist = gamelist;
	}

	public long getId() {
	 	 return id; 
	}
	
	public String getGamerole() {
	 	 return gamerole; 
	}
	
	public void setGamerole(String gamerole) { 
		 this.gamerole = gamerole; 
	}
	
	public int getIncoming() {
	 	 return incoming; 
	}
	
	public void setDelivery(int delivery) { 
		 this.delivery = delivery; 
	}
	
	public int getDelivery() {
	 	 return delivery; 
	}
	
	public void setIncoming(int incoming) { 
		 this.incoming = incoming; 
	}
	
	public int getRound() {
	 	 return round; 
	}
	
	public void setRound(int round) { 
		 this.round = round; 
	}
	
	
	public long getOwner_id() {
		return owner_id;
	}

	public void setOwner_id(long owner_id) {
		this.owner_id = owner_id;
	}

	public double getTotalcosts() {
	 	 return totalcosts; 
	}
	
	public void setTotalcosts(double totalcosts) { 
		 this.totalcosts = totalcosts; 
	}
	
	public int getInventory() {
	 	 return inventory; 
	}
	
	public void setInventory(int inventory) { 
		 this.inventory = inventory; 
	}
	
	public int getBackorder() {
	 	 return backorder; 
	}
	
	public void setBackorder(int backorder) { 
		 this.backorder = (backorder<0?0:backorder); 
	}
	
	public int getNeworder() {
	 	 return neworder; 
	}
	
	public void setNeworder(int neworder) { 
		 this.neworder = neworder; 
	}
	
	public int getOurorder() {
	 	 return ourorder; 
	}
	
	public void setOurorder(int ourorder) { 
		 this.ourorder = ourorder; 
	} 

	public void calc(int neworder)
	{
		setRound(this.round+1);
	    setNeworder(neworder);
	    setDelivery(((this.inventory-neworder)<0?this.inventory:neworder));
		setInventory(this.incoming  + this.inventory - this.backorder - this.neworder);
		setBackorder(this.neworder-this.inventory);
		setTotalcosts(this.inventory*0.5+backorder);
		//TODO incoming für diese Runde auslesen
	}
	
	// Konstrucktoren----------------------------------------Start
			public Playsheet_V1_01() {
				// Standart Konstruktor
			}
			
			public Playsheet_V1_01(User_V1_01 owner, String role) {
				System.out.println("Playsheet_V1_01_Constructor initialize a Playsheet");
				// Den playsheet einen Besitzer und ein Spiel zuordnen
				this.owner_id = owner.getId();
				this.gamerole = role;
				// restliche Attribute Initialisieren
				this.inventory = 15; 	//Start Wert im Inventar
				this.incoming = 0; 		//demnächst Eintreffende Lieferung 
				this.round = 1;			//Start in Runde 1
				this.backorder = 0;		/* usw Initialisierung der Startwerte*/
				this.ourorder = 0;		
				this.neworder = 0;
				this.totalcosts =0;	
			}		
			// Konstrucktoren----------------------------------------Ende
	
}
