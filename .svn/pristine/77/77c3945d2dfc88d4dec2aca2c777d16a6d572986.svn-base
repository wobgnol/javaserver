package de.moaiosbeer.rest_api;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.security.RolesAllowed;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.hibernate.criterion.Restrictions;

import de.moaiosbeer.dao.Game_V1_01_DaO;
import de.moaiosbeer.dao.Playsheet_V1_01_DaO;
import de.moaiosbeer.dao.User_V1_01_DaO;
import de.moaiosbeer.db.models.Game_V1_01;
import de.moaiosbeer.db.models.Playsheet_V1_01;
import de.moaiosbeer.db.models.User_V1_01;
import de.moaiosbeer.hibernate.Hib_DB_Conn_V1_01;


/**
 * Dieser API Pfad dient dem Login_Servlet als Nutzer Validierung für den Login
 * @author Stephan
 */
@Path("v1.01/games")
public class API_Games_V1_01 {
	
	
	
	
	
	// Hole Spiele mit einer ID
		  @GET
		  @RolesAllowed({"admin","user","manager-gui"}) 
		  @Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
		  @Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
			public List<Game_V1_01> Get_Users(){
				  Hib_DB_Conn_V1_01 Con = new Hib_DB_Conn_V1_01();
					try{
				  		// Session und Transaktion starten
				  		Con.Transaction_Start();
				  		// Timeout der Transaktion setzen
				  		Con.getTransaction().setTimeout(10);
				  		
				  		//DB Abfrage mit Hibernate starten alle Tabellen einträge von User
						List<Game_V1_01> list = Con.getSession().createCriteria(Game_V1_01.class,"u").list();
				  		
				  		// Transaktion abschließen
				  		Con.getTransaction().commit();
				  		System.out.println(new Date()+" || Hibernate: Transaction comited");
				  		//req.getSession().invalidate();
				  		
				  		return list;
				  		
				  	// return user_chain ;
				  	}catch(RuntimeException e){
				  		try{
				  			Con.getTransaction().rollback();
				  		

				  			System.out.println("Rolback");
				  		}catch(RuntimeException rbe){
				  			//TODO Log für Transaktions rollback anlegen : log.error("Couldn’t roll back transaction", rbe);
				  		}
				  		throw e;
				  	}finally{
				  		if(Con.getSession()!=null){
				  			Con.getSession().close();
				  			System.out.println(new Date()+ " || Hibernate: Session Closed");
				  			//TODO Log für Hibernate Sessions anlegen
				  		}
				  	}	
				}
	
			@GET
			@RolesAllowed({"admin","user","manager-gui"})
			@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
			@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
			@Path("/update")
			public Response update_game(Game_V1_01 game)
			{
				//TODO anhand des anfragenden Users ermitteln, welches Playsheet gefragt ist
				Game_V1_01_DaO g = new Game_V1_01_DaO();
				g.updateGame(game);
				return Response.status(200).build();
			}
			
			@GET
			@RolesAllowed({"admin","user","manager-gui"})
			@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
			@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
			@Path("/create")
			public Response create_game(Game_V1_01 game)
			{
				//TODO anhand des anfragenden Users ermitteln, welches Playsheet gefragt ist
				Game_V1_01_DaO g = new Game_V1_01_DaO();
				g.newGame(game);
				return Response.status(201).build();
			}
			
			@GET
			@RolesAllowed({"admin","user","manager-gui"})
			@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
			@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
			@Path("/playsheet/{id}")
			public Response get_whole_playsheet(@PathParam("id") long userid)
			{
				User_V1_01_DaO u = new User_V1_01_DaO();
				Game_V1_01_DaO g = new Game_V1_01_DaO();

				List<Game_V1_01> liste = g.activeGames();
				for(int i=0;i<liste.size();i++)
				{
					for(User_V1_01 user : liste.get(i).getUserlist())
					{
						if(user.getId() == userid)
						{
							for(Playsheet_V1_01 ps : liste.get(i).getPlaysheets())
							{
								if(ps.getOwner_id() == userid)
								{
									Playsheet_V1_01_DaO p = new Playsheet_V1_01_DaO();
									
									try {
										return Response.status(200).entity(p.get_whole_playsheet((long)1)).build();
									} catch (Exception e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
										return Response.status(500).build();
									}
								}
							}
							//Etwas ist fehlgeschlagen, da der User im Game vorhanden ist
							return Response.status(500).build();
						}
					}
				}
				return Response.status(500).build();
			}
	
			@GET
			@RolesAllowed({"admin","user","manager-gui"}) 
			//@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
			@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
			@Path("/open")
			public Response get_open_games()
			{
				Game_V1_01_DaO gd = new Game_V1_01_DaO();
				return Response.status(200).entity(gd.openGames()).build();
			}
			
			@GET
			@RolesAllowed({"admin","user","manager-gui"}) 
			//@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
			@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
			@Path("/active")
			public Response get_active_games()
			{
				Game_V1_01_DaO gd = new Game_V1_01_DaO();
				return Response.status(200).entity(gd.activeGames()).build();
			}
			
			@GET
			@RolesAllowed({"admin","user","manager-gui"}) 
			@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
			@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
			@Path("/active/{id}")
			public Response get_active_game_info(@PathParam("id") long id)
			{
				Game_V1_01 deleteThis = new Game_V1_01();
				List<Game_V1_01> temp = new ArrayList<Game_V1_01>();
				
				Game_V1_01_DaO gd = new Game_V1_01_DaO();
				temp = gd.activeGames();
				for(Game_V1_01 game : temp)
				{
					if(game.getId() == id)
					{
						return Response.status(200).entity(game).build();
					}
				}
				return Response.status(404).entity("Error: Game not available").build();
			}
			
			@GET
			@RolesAllowed({"admin","user","manager-gui"})
			@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
			@Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
			@Path("/open/{id}")
			public Response get_open_game_info(@PathParam("id") long id)
			{
				Game_V1_01 deleteThis = new Game_V1_01();
				List<Game_V1_01> temp = new ArrayList<Game_V1_01>();
				
				Game_V1_01_DaO gd = new Game_V1_01_DaO();
				temp = gd.openGames();
				for(Game_V1_01 game : temp)
				{
					if(game.getId() == id)
					{
						return Response.status(200).entity(game).build();
					}
				}
				return Response.status(404).entity("Error: Game not available").build();
			}

	  // Hole Spiele mit einer ID
	  @GET
	  @RolesAllowed({"admin","user","manager-gui"})
	  @Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
	  @Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_HTML,MediaType.TEXT_PLAIN})
	  @Path("/{id}")
		public List<Game_V1_01> Get_Users(@PathParam("id") long id){
			  Hib_DB_Conn_V1_01 Con = new Hib_DB_Conn_V1_01();
				try{
			  		// Session und Transaktion starten
			  		Con.Transaction_Start();
			  		// Timeout der Transaktion setzen
			  		Con.getTransaction().setTimeout(10);
			  		
			  		//DB Abfrage mit Hibernate starten alle Tabellen einträge von User
					List<Game_V1_01> list = Con.getSession().createCriteria(Game_V1_01.class,"u").add(Restrictions.eq( "id",(long)id ) ).list();
			  		
			  		// Transaktion abschließen
			  		Con.getTransaction().commit();
			  		System.out.println(new Date()+" || Hibernate: Transaction comited");
			  		//req.getSession().invalidate();
			  		
			  		return list;
			  		
			  	// return user_chain ;
			  	}catch(RuntimeException e){
			  		try{
			  			Con.getTransaction().rollback();
			  		

			  			System.out.println("Rolback");
			  		}catch(RuntimeException rbe){
			  			//TODO Log für Transaktions rollback anlegen : log.error("Couldn’t roll back transaction", rbe);
			  		}
			  		throw e;
			  	}finally{
			  		if(Con.getSession()!=null){
			  			Con.getSession().close();
			  			System.out.println(new Date()+ " || Hibernate: Session Closed");
			  			//TODO Log für Hibernate Sessions anlegen
			  		}
			  	}	
			}
	  
}